char* ltype_name (int t) {
	switch (t) {
	case LVAL_NUM: return "Number";
	case LVAL_ERR: return "Error";
	case LVAL_SYM: return "Symbol";
	case LVAL_SEXPR: return "S-expression";
	case LVAL_QEXPR: return "Q-expression";
	case LVAL_LAMBDA: return "Function";
	case LVAL_BUILTIN: return "Builtin function";
	default: return "Unknown type";
	}
}		

/* Creates a new number lval*/
lval* lval_num (long x) {
    lval* v = calloc(1, sizeof(lval));
    v->type = LVAL_NUM;
    v->num = x;
    return v;
}

/* Creates a new error lval*/
lval* lval_err (char* fmt, ...) {
    lval* v = calloc(1, sizeof(lval));
    v->type = LVAL_ERR;

	va_list va;
	va_start(va, fmt);
	v->err = malloc(512);
	vsnprintf(v->err, 511, fmt, va);
    v->err = realloc(v->err, strlen(v->err) + 1);
	va_end(va);
    return v;
}

lval* lval_sym (char* m) {
    lval* v = calloc(1, sizeof(lval));
    v->type = LVAL_SYM;
    v->sym = malloc(strlen(m) + 1);
    strcpy(v->sym, m);
    return v;
}

lval* lval_sexpr (void) {
    lval* v = calloc(1, sizeof(lval));
    v->type = LVAL_SEXPR;
    v->count = 0;
    v->cell = NULL;
    return v;
}

lval* lval_qexpr (void) {
    lval* v = calloc (1, sizeof (lval));
    v->type = LVAL_QEXPR;
    v->count = 0;
    v->cell = NULL;
    return v;
}

lval* lval_builtin (lbuiltin builtin) {
	lval* v = calloc (1, sizeof (lval));
	v->type = LVAL_BUILTIN;
	v->builtin = builtin;
	return v;
}

lenv* lenv_new (void);

/* if we want a declaration dependent environment, like in sml, we need to pass this here from builtin_lambda */
lval* lval_lambda(lval* formals, lval* body) {
	lval* v = calloc (1, sizeof (lval));
	v->type = LVAL_LAMBDA;
	v->formals = formals;
	v->body = body;
	v->env = lenv_new();
	return v;
}

void lenv_del (lenv*);

void lval_del(int n, ...) {
	va_list list;
	va_start(list, n);

	for (int i = 0; i < n; i++) {
		lval* v = va_arg(list, lval*);
		
		switch (v->type) {
			/* Do nothing special for number and lbuiltin type*/
		case LVAL_NUM: break;
		case LVAL_BUILTIN: break;
			/* For Err or Sym free the string data*/
		case LVAL_LAMBDA:
			lenv_del(v->env);
			lval_del(2, v->formals, v->body);
			break;
		case LVAL_ERR: free(v->err); break;
		case LVAL_SYM: free(v->sym); break;
			/* If Sexpr then delete all elements inside*/
		case LVAL_SEXPR:
		case LVAL_QEXPR:
			for (int i = 0; i < v->count; i++) {
				lval_del(1, v->cell[i]);
			}
			/* Also free the memory allocated to contain the pointers*/
			free(v->cell);
			break;
		}
		/* Free the memory allocated for the "lval" struct itself*/
		free(v);
	}

	va_end(list);
}

lenv* lenv_new (void) {
	lenv* e = calloc(1, sizeof(lenv));
	e->count = 0;
	e->symbols = NULL;
	e->lvals = NULL;
	e->parent = NULL;
	return e;
}

void lenv_del (lenv* e) {
	for (int i = 0; i < e->count; i++) {
		free(e->symbols[i]);
		lval_del(1, e->lvals[i]);
	}
	free(e->symbols);
	free(e->lvals);
	free(e);
}

lval* lval_copy (lval*);

lenv* lenv_copy (lenv* e) {
	lenv* env = lenv_new();
	env->count = e->count;
	env->symbols = malloc (env->count * sizeof(char*));
	env->lvals = malloc (env->count * sizeof(lval*));

	for (int i = 0; i < e->count; i++) {
		env->symbols[i] = malloc(strlen(e->symbols[i]) + 1);
		strcpy(env->symbols[i], e->symbols[i]);
		env->lvals[i] = lval_copy(e->lvals[i]);
	}

	return env;
}

void lval_print (lval* v);

void lval_print_expr (lval* v, char open, char close) {
    putchar(open);
    for (int i = 0; i < v->count; i++) {
		lval_print(v->cell[i]);

		if (i != v->count-1) {
			putchar(' ');
		}
    }
    putchar(close);
} 

/* Print an "lval"*/
void lval_print(lval* v) {
    switch (v->type) {
		/* In the case the type is a number print it*/
    case LVAL_NUM: printf("%li", v->num); break;
    case LVAL_SYM: printf("%s", v->sym); break;
    case LVAL_ERR: printf("Error: %s", v->err); break;
    case LVAL_SEXPR: lval_print_expr (v, '(', ')'); break;
    case LVAL_QEXPR: lval_print_expr (v, '{', '}'); break;
	case LVAL_BUILTIN: printf("<builtin function>"); break;
	case LVAL_LAMBDA:
		printf("(\\ "); lval_print(v->formals);
		putchar(' ');  lval_print(v->body); putchar(')');
		break;
    }
}

/* Print an "lval" followed by a newline*/
void lval_println(lval* v) { lval_print(v); putchar('\n'); }

lval* lval_read_num (mpc_ast_t* t) {
    errno = 0;
    long x = strtol(t->contents, NULL, 10);
    return errno != ERANGE ? lval_num(x) : lval_err("invalid number"); 
}

/* Change to return null and set errno on error */
lval* lval_pop (lval* v, unsigned int i) {
    LASSERT(v, i < v->count, 0, NULL, "lval_pop", "index in range of v->count");
    
    lval* x = v->cell[i];
    memmove (&v->cell[i], &v->cell[i+1], sizeof (lval*) * (v->count - i - 1));
    v->count--;
    v->cell = realloc (v->cell, sizeof (lval*) * v->count);
    return x;
}

lval* lval_take (lval* v, unsigned int i) {
    lval* x = lval_pop (v, i);
    lval_del (1, v);
    return x;
}

lval* lval_copy (lval* v) {
	
	lval* w = calloc(1, sizeof(lval));
	w->type = v->type;
	
	switch (v->type) {
	case LVAL_NUM:
		w->num = v->num;
		break;
	case LVAL_BUILTIN:
		w->builtin = v->builtin;
		break;
	case LVAL_LAMBDA:
		w->env = lenv_copy(v->env);
		w->formals = lval_copy(v->formals);
		w->body = lval_copy(v->body);
		break;
	case LVAL_SYM:
		w->sym = malloc(strlen(v->sym)+1);
		strncpy(w->sym, v->sym, strlen(v->sym)+1);
		break;
	case LVAL_ERR:
		w->err = malloc(strlen(v->err)+1);
		strncpy(w->err, v->err, strlen(v->err)+1);
		break;
	case LVAL_QEXPR:
	case LVAL_SEXPR:
		w->count = v->count;
		w->cell = calloc(v->count, sizeof(lval*));
		for (int i = 0; i < v->count; i++) {
			w->cell[i] = lval_copy(v->cell[i]);
		}
		break;
	}

	return w;
}

lval* lenv_get (lenv* env, lval* s) {
	for (int i = 0; i < env->count; i++) {
		if (strcmp(env->symbols[i], s->sym) == 0) {
			return lval_copy(env->lvals[i]);
		}
	}

	if (env->parent) {
		return lenv_get (env->parent, s);
	} else {
		return lval_err("Unbound symbol! %s", s->sym);
	}
}

void lenv_put (lenv* env, lval* s, lval* v) {
	for (int i = 0; i < env->count; i++) {
		if (strcmp(env->symbols[i], s->sym) == 0) {
			lval_del(1, env->lvals[i]);
			env->lvals[i] = lval_copy(v);
			return;
		}
	}

	env->count++;
	env->symbols = realloc(env->symbols, sizeof(char*) * env->count);
	env->lvals = realloc(env->lvals, sizeof(lval*) * env->count);
	
	env->symbols[env->count - 1] = malloc(strlen(s->sym) + 1);
	strcpy(env->symbols[env->count - 1], s->sym);
	env->lvals[env->count - 1] = lval_copy(v);
}

void lenv_def (lenv* e, lval* k, lval* v) {
	while (e->parent) { e = e->parent; }
	lenv_put(e, k, v);
}

void lenv_print (lenv* e) {
	for (int i = 0; i < e->count; i++) {
		printf("Name: %s, Value: ", e->symbols[i]);
		lval_println(e->lvals[i]);
	}
}
